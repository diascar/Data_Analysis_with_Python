Help on function barplot in module seaborn.categorical:

bbaarrpplloott(*, x=None, y=None, hue=None, data=None, order=None, hue_order=None, estimator=<function mean at 0x7fab18085b00>, ci=95, n_boot=1000, units=None, seed=None, orient=None, color=None, palette=None, saturation=0.75, errcolor='.26', errwidth=None, capsize=None, dodge=True, ax=None, **kwargs)
    Show point estimates and confidence intervals as rectangular bars.
    
    A bar plot represents an estimate of central tendency for a numeric
    variable with the height of each rectangle and provides some indication of
    the uncertainty around that estimate using error bars. Bar plots include 0
    in the quantitative axis range, and they are a good choice when 0 is a
    meaningful value for the quantitative variable, and you want to make
    comparisons against it.
    
    For datasets where 0 is not a meaningful value, a point plot will allow you
    to focus on differences between levels of one or more categorical
    variables.
    
    It is also important to keep in mind that a bar plot shows only the mean
    (or other estimator) value, but in many cases it may be more informative to
    show the distribution of values at each level of the categorical variables.
    In that case, other approaches such as a box or violin plot may be more
    appropriate.
    
    
    Input data can be passed in a variety of formats, including:
    
    - Vectors of data represented as lists, numpy arrays, or pandas Series
      objects passed directly to the ``x``, ``y``, and/or ``hue`` parameters.
    - A "long-form" DataFrame, in which case the ``x``, ``y``, and ``hue``
      variables will determine how the data are plotted.
    - A "wide-form" DataFrame, such that each numeric column will be plotted.
    - An array or list of vectors.
    
    In most cases, it is possible to use numpy or Python objects, but pandas
    objects are preferable because the associated names will be used to
    annotate the axes. Additionally, you can use Categorical types for the
    grouping variables to control the order of plot elements.    
    
    This function always treats one of the variables as categorical and
    draws data at ordinal positions (0, 1, ... n) on the relevant axis, even
    when the data has a numeric or date type.
    
    See the :ref:`tutorial <categorical_tutorial>` for more information.    
    
    Parameters
    ----------
    x, y, hue : names of variables in ``data`` or vector data, optional
        Inputs for plotting long-form data. See examples for interpretation.        
    data : DataFrame, array, or list of arrays, optional
        Dataset for plotting. If ``x`` and ``y`` are absent, this is
        interpreted as wide-form. Otherwise it is expected to be long-form.    
    order, hue_order : lists of strings, optional
        Order to plot the categorical levels in, otherwise the levels are
        inferred from the data objects.        
    estimator : callable that maps vector -> scalar, optional
        Statistical function to estimate within each categorical bin.
    ci : float or "sd" or None, optional
        Size of confidence intervals to draw around estimated values.  If
        "sd", skip bootstrapping and draw the standard deviation of the
        observations. If ``None``, no bootstrapping will be performed, and
        error bars will not be drawn.
    n_boot : int, optional
        Number of bootstrap iterations to use when computing confidence
        intervals.
    units : name of variable in ``data`` or vector data, optional
        Identifier of sampling units, which will be used to perform a
        multilevel bootstrap and account for repeated measures design.
    seed : int, numpy.random.Generator, or numpy.random.RandomState, optional
        Seed or random number generator for reproducible bootstrapping.    
    orient : "v" | "h", optional
        Orientation of the plot (vertical or horizontal). This is usually
        inferred based on the type of the input variables, but it can be used
        to resolve ambiguitiy when both `x` and `y` are numeric or when
        plotting wide-form data.    
    color : matplotlib color, optional
        Color for all of the elements, or seed for a gradient palette.    
    palette : palette name, list, or dict
        Colors to use for the different levels of the ``hue`` variable. Should
        be something that can be interpreted by :func:`color_palette`, or a
        dictionary mapping hue levels to matplotlib colors.    
    saturation : float, optional
        Proportion of the original saturation to draw colors at. Large patches
        often look better with slightly desaturated colors, but set this to
        ``1`` if you want the plot colors to perfectly match the input color
        spec.    
    errcolor : matplotlib color
        Color for the lines that represent the confidence interval.
    errwidth : float, optional
        Thickness of error bar lines (and caps).         
    capsize : float, optional
        Width of the "caps" on error bars.
    
    dodge : bool, optional
        When hue nesting is used, whether elements should be shifted along the
        categorical axis.    
    ax : matplotlib Axes, optional
        Axes object to draw the plot onto, otherwise uses the current Axes.    
    kwargs : key, value mappings
        Other keyword arguments are passed through to
        :meth:`matplotlib.axes.Axes.bar`.
    
    Returns
    -------
    ax : matplotlib Axes
        Returns the Axes object with the plot drawn onto it.    
    
    See Also
    --------
    countplot : Show the counts of observations in each categorical bin.    
    pointplot : Show point estimates and confidence intervals using scatterplot
                glyphs.    
    catplot : Combine a categorical plot with a :class:`FacetGrid`.    
    
    Examples
    --------
    
    Draw a set of vertical bar plots grouped by a categorical variable:
    
    .. plot::
        :context: close-figs
    
        >>> import seaborn as sns
        >>> sns.set_theme(style="whitegrid")
        >>> tips = sns.load_dataset("tips")
        >>> ax = sns.barplot(x="day", y="total_bill", data=tips)
    
    Draw a set of vertical bars with nested grouping by a two variables:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="day", y="total_bill", hue="sex", data=tips)
    
    Draw a set of horizontal bars:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="tip", y="day", data=tips)
    
    Control bar order by passing an explicit order:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="time", y="tip", data=tips,
        ...                  order=["Dinner", "Lunch"])
    
    Use median as the estimate of central tendency:
    
    .. plot::
        :context: close-figs
    
        >>> from numpy import median
        >>> ax = sns.barplot(x="day", y="tip", data=tips, estimator=median)
    
    Show the standard error of the mean with the error bars:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="day", y="tip", data=tips, ci=68)
    
    Show standard deviation of observations instead of a confidence interval:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="day", y="tip", data=tips, ci="sd")
    
    Add "caps" to the error bars:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="day", y="tip", data=tips, capsize=.2)
    
    Use a different color palette for the bars:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="size", y="total_bill", data=tips,
        ...                  palette="Blues_d")
    
    Use ``hue`` without changing bar position or width:
    
    .. plot::
        :context: close-figs
    
        >>> tips["weekend"] = tips["day"].isin(["Sat", "Sun"])
        >>> ax = sns.barplot(x="day", y="total_bill", hue="weekend",
        ...                  data=tips, dodge=False)
    
    Plot all bars in a single color:
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="size", y="total_bill", data=tips,
        ...                  color="salmon", saturation=.5)
    
    Use :meth:`matplotlib.axes.Axes.bar` parameters to control the style.
    
    .. plot::
        :context: close-figs
    
        >>> ax = sns.barplot(x="day", y="total_bill", data=tips,
        ...                  linewidth=2.5, facecolor=(1, 1, 1, 0),
        ...                  errcolor=".2", edgecolor=".2")
    
    Use :func:`catplot` to combine a :func:`barplot` and a :class:`FacetGrid`.
    This allows grouping within additional categorical variables. Using
    :func:`catplot` is safer than using :class:`FacetGrid` directly, as it
    ensures synchronization of variable order across facets:
    
    .. plot::
        :context: close-figs
    
        >>> g = sns.catplot(x="sex", y="total_bill",
        ...                 hue="smoker", col="time",
        ...                 data=tips, kind="bar",
        ...                 height=4, aspect=.7);
